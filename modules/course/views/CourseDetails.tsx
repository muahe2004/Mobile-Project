import { SocketContext } from "@/app/_layout"; // import context socket
import Button from "@/components/Button/Button";
import { useUserInfo } from "@/hooks/useGetUserInfor";
import React, { useContext, useEffect, useState } from "react";
import { Image, Linking, ScrollView, StyleSheet, Text, View } from "react-native";
import { colors } from "../../../assets/styles/theme";

type Course = {
  id: string;
  tenKhoaHoc: string;
  moTa: string;
  giaBan: number;
  hinhAnh?: string;
};

export interface IRegisterCourse {
  khoaHocId: string;
  nguoiDungId: string;
  trangThai: string;
}

const CourseDetails: React.FC<{ course: Course }> = ({ course }) => {
  const API_URL = process.env.EXPO_PUBLIC_UNILEARN_API;
  const { user, loading } = useUserInfo();
  const userID = user?.id;
  const socket = useContext(SocketContext); 
  const [paySuccess, setPaySuccess] = useState(false)
  const [isPaying, setIsPaying] = useState(false);

  useEffect(() => {
    if (!socket) return;

    // l·∫Øng nghe event t·ª´ backend
    socket.on("paymentSuccess", (data: any) => {
      console.log("üí∞ Thanh to√°n th√†nh c√¥ng realtime:", data);
      setPaySuccess(true);
    });

    socket.on("paymentFailed", (data: any) => {
      console.log("‚ùå Thanh to√°n th·∫•t b·∫°i realtime:", data);
      setPaySuccess(false);
    });

    // cleanup
    return () => {
      socket.off("paymentSuccess");
      socket.off("paymentFailed");
    };
  }, [socket]);
  
  const handleRegister = async (id: string, tenKhoaHoc: string, giaBan: number) => {
    const payload: IRegisterCourse = {
      nguoiDungId: user?.id || "", 
      khoaHocId: id,                                 
      trangThai: "ƒêang h·ªçc",
    };

    try {
      const registerRes = await registerCourse(payload);

      const dangKyId = registerRes.id;

      if (giaBan > 0) {
        // await addBill(dangKyId);
        setIsPaying(true); // ƒë√°nh d·∫•u ƒëang ch·ªù thanh to√°n
        momoPayment();
        // router.replace(`/my-courses/${user?.id}`);
      } else {
        // router.replace(`/my-courses/${user?.id}`);
      }

    } catch (err) {
      console.error(err);
    }
  }

  const momoPayment = async () => {
    try {
      const res = await fetch(`${API_URL}/payment/momo`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          nguoiDungID: user?.id,
          orderInfo: `Thanh to√°n kho√° h·ªçc ${course.tenKhoaHoc}`,
          amount: course.giaBan,
        })
      })

      const data = await res.json();

      console.log(data);

      if (data?.payUrl) {
        // üëâ ƒêi·ªÅu h∆∞·ªõng sang trang MoMo
        await Linking.openURL(data.payUrl);
      } else {
        console.error("Kh√¥ng nh·∫≠n ƒë∆∞·ª£c payUrl t·ª´ MoMo:", data);
      }

    } catch (error) {
      console.error("L·ªói khi ƒëƒÉng k√Ω:", error);
    }
  }

  // L·∫Øng nghe socket
  useEffect(() => {
    if (!socket) return;

    socket.on("paymentSuccess", (data: any) => {
      console.log("üí∞ Thanh to√°n th√†nh c√¥ng realtime:", data);
      setPaySuccess(true);
    });

    socket.on("paymentFailed", (data: any) => {
      console.log("‚ùå Thanh to√°n th·∫•t b·∫°i realtime:", data);
      setPaySuccess(false);
    });

    return () => {
      socket.off("paymentSuccess");
      socket.off("paymentFailed");
    };
  }, [socket]);

  // Th·ª±c hi·ªán h√†nh ƒë·ªông khi thanh to√°n th√†nh c√¥ng v√† ƒëang trong qu√° tr√¨nh thanh to√°n
  useEffect(() => {
    if (paySuccess && isPaying) {
      console.log("üéâ Thanh to√°n MoMo th√†nh c√¥ng!");
      setIsPaying(false); // reset tr·∫°ng th√°i
    }
  }, [paySuccess, isPaying]);

  const registerCourse = async (registerCourse: IRegisterCourse)  => {
    try {
      const res = await fetch(`${API_URL}/registered-courses`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          nguoiDungId: registerCourse.nguoiDungId,
          khoaHocId: registerCourse.khoaHocId,
          trangThai: "ƒêang h·ªçc"
        })
      });

      if (!res.ok) throw new Error("ƒêƒÉng k√Ω th·∫•t b·∫°i!");

      const data = await res.json();
      return data.data; 
    } catch (error) {
      console.error("L·ªói khi ƒëƒÉng k√Ω:", error);
      return null;
    }
  }

  const addBill = async (dangKyId: string) => {
    try {
      const res = await fetch(`${API_URL}/bills`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          nguoiDungId: user?.id,
          dangKyId: dangKyId,
          loaiThanhToan: "Chuy·ªÉn kho·∫£n",
          soTien: course.giaBan,
          trangThai: "Ch·ªù thanh to√°n",
          ghiChu: `Thanh to√°n h·ªçc ph√≠ kho√° h·ªçc ${course.tenKhoaHoc}`
        })
      });

      if (!res.ok) {
        throw new Error("ƒêƒÉng k√Ω th·∫•t b·∫°i!");
      }

      const data = await res.json();
    } catch (error) {
      console.error("L·ªói khi ƒëƒÉng k√Ω:", error);
    }
  }

  return (
    <ScrollView style={styles.container}>
      <Image
        source={{
          uri: course.hinhAnh
            ? course.hinhAnh.replace("localhost", `${process.env.EXPO_PUBLIC_IPV4}`)
            : "../../../assets/images/Nhapmon_course.png",
        }}
        style={styles.thumbnail}
      />

      {/* N·ªôi dung */}
      <View style={styles.content}>
        <Text style={styles.title}>{course.tenKhoaHoc}</Text>
        <Text style={styles.price}>{course.giaBan.toLocaleString()} VND</Text>

        <Button content="ƒêƒÇNG K√ù" onPress={() => handleRegister(course.id, course.tenKhoaHoc, course.giaBan)}/>
      </View>      
    </ScrollView>
  );
};

export default CourseDetails;

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#fff",
  },
  thumbnail: {
    width: "100%",
    height: 250,
    resizeMode: "cover",
  },
  content: {
    padding: 12,
  },
  title: {
    fontSize: 22,
    fontWeight: "bold",
    marginBottom: 8,
  },
  price: {
    fontSize: 18,
    fontWeight: "700",
    color: "orange",
    marginBottom: 8,
  },
  button: {
    marginHorizontal: 12,
    padding: 16,
    backgroundColor: colors.primary,
    borderRadius: 12,
    alignItems: "center",
  },
  buttonText: {
    fontSize: 18,
    fontWeight: "600",
    color: "#fff",
  },
});