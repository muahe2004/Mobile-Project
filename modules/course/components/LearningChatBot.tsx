import { colors } from "@/assets/styles/theme";
import Button from "@/components/Button/Button";
import { Ionicons } from "@expo/vector-icons";
import React, { useEffect, useRef } from "react";
import { Animated, Dimensions, KeyboardAvoidingView, Platform, ScrollView, StyleSheet, Text, TextInput, TouchableOpacity, View } from "react-native";

const { width, height } = Dimensions.get("window");

interface LearningChatBotProps {
  open: boolean;
}

const contentsChat = [
  {
    role: "user",
    parts: [{ text: "Xin ch√†o, b·∫°n c√≥ th·ªÉ gi·ªõi thi·ªáu v·ªÅ m√¨nh kh√¥ng?" }]
  },
  {
    role: "model",
    parts: [
      {
        text: "Ch√†o b·∫°n! T√¥i l√† Gemini ‚Äî m·ªôt m√¥ h√¨nh ng√¥n ng·ªØ ti√™n ti·∫øn do Google ph√°t tri·ªÉn. T√¥i c√≥ th·ªÉ tr√≤ chuy·ªán, vi·∫øt th∆°, t·∫°o n·ªôi dung v√† gi√∫p b·∫°n gi·∫£i quy·∫øt nhi·ªÅu v·∫•n ƒë·ªÅ kh√°c nhau. üòä"
      }
    ]
  },
  {
    role: "user",
    parts: [{ text: "Hay qu√°, b·∫°n c√≥ th·ªÉ k·ªÉ cho t√¥i nghe m·ªôt c√¢u chuy·ªán ng·∫Øn v·ªÅ m√πa thu kh√¥ng?" }]
  },
  {
    role: "model",
    parts: [
      {
        text: "T·∫•t nhi√™n r·ªìi üçÅ\n\nM·ªôt bu·ªïi s√°ng m√πa thu, khi nh·ªØng chi·∫øc l√° v√†ng r∆°i nh·∫π xu·ªëng con ƒë∆∞·ªùng nh·ªè, c√¥ b√© An mang theo chi·∫øc gi·ªè m√¢y ƒëi h√°i qu·∫£ h·ªìng. M·ªói b∆∞·ªõc ch√¢n vang l√™n gi·ªØa kho·∫£ng tr·ªùi trong v·∫Øt, gi√≥ kh·∫Ω ƒë∆∞a h∆∞∆°ng th∆°m c·ªßa hoa c√∫c. Trong kho·∫£nh kh·∫Øc ·∫•y, An nh·∫≠n ra r·∫±ng m√πa thu kh√¥ng ch·ªâ ƒë·∫πp ‚Äî m√† c√≤n mang ƒë·∫øn c·∫£m gi√°c b√¨nh y√™n l·∫° k·ª≥."
      }
    ]
  },
  {
    role: "user",
    parts: [{ text: "B·∫°n vi·∫øt hay th·∫≠t ƒë√≥! Gi·ªù h√£y t√≥m t·∫Øt l·∫°i c√¢u chuy·ªán tr√™n trong 1 c√¢u gi√∫p t√¥i." }]
  },
  {
    role: "model",
    parts: [
      {
        text: "C√¢u chuy·ªán k·ªÉ v·ªÅ c√¥ b√© An c·∫£m nh·∫≠n v·∫ª ƒë·∫πp v√† s·ª± b√¨nh y√™n c·ªßa m√πa thu qua h√†nh tr√¨nh h√°i h·ªìng s√°ng s·ªõm."
      }
    ]
  }
];

export const LearningChatBot: React.FC<LearningChatBotProps & { onClose: () => void }> = ({ open, onClose }) => {

    const slideAnim = useRef(new Animated.Value(width)).current;

    useEffect(() => {
        Animated.timing(slideAnim, {
            toValue: open ? 0 : width,
            duration: 300,
            useNativeDriver: true
        }).start();
    }, [open]);

    return (
        <Animated.View style={[styles.menu, { transform: [{ translateX: slideAnim }] }]}>
            <View style={styles.chatContent}>
                <Button
                    style={styles.navigationClose}
                    icon={<Ionicons name="close" size={18} color="#fff" />}
                    onPress={onClose}
                />

                <KeyboardAvoidingView
                    behavior={Platform.OS === "ios" ? "padding" : "height"}
                    style={{ flex: 1}}
                    keyboardVerticalOffset={Platform.OS === "ios" ? 0 : 0}
                >
                    <ScrollView
                        style={{
                            flex: 1,
                            paddingHorizontal: 12,
                            borderTopColor: colors.primary,
                            borderTopWidth: 1,
                        }}
                        showsVerticalScrollIndicator={false}
                        >
                        {contentsChat.map((msg, index) => (
                            <View
                            key={index}
                            style={[
                                styles.messageContainer,
                                msg.role === "user" ? styles.userMessage : styles.modelMessage,
                            ]}
                            >
                            <View
                                style={[
                                styles.bubble,
                                msg.role === "user" ? styles.userBubble : styles.modelBubble,
                                ]}
                            >
                                <Text
                                style={[
                                    styles.messageText,
                                    msg.role === "user" ? styles.userText : styles.modelText,
                                ]}
                                >
                                {msg.parts[0].text}
                                </Text>
                            </View>
                            </View>
                        ))}
                    </ScrollView>

                    <View style={styles.inputContainer}>
                        <TextInput
                            style={styles.input}
                            placeholder="Nh·∫≠p tin nh·∫Øn..."
                            multiline
                        />
                        <TouchableOpacity style={styles.sendButton}>
                            <Ionicons name="send" size={20} color="#fff" />
                        </TouchableOpacity>
                    </View>
                </KeyboardAvoidingView>
            </View>
        </Animated.View>
    );
};

const styles = StyleSheet.create({
    menu: {
        position: "absolute",
        top: 0,
        left: 0,
        width,
        height,
        zIndex: 10,
        backgroundColor: "#fff"
    },
    chatContent: {
        position: "absolute",
        top: 0,
        right: 0,
        width: "100%",
        height: "100%",
        backgroundColor: "#fff",
        paddingVertical: 40,
        paddingBottom: 80,
        shadowColor: "#000",
        shadowOffset: { width: -2, height: 0 },
        shadowOpacity: 0.2,
        shadowRadius: 4,
        elevation: 5
    },
    navigationClose: {
        width: 60,
        marginLeft: "auto",
        marginRight: 10,
        backgroundColor: "#FF7F7F"
    },
    messageContainer: {
        marginVertical: 6,
        flexDirection: "row"
    },
    userMessage: {
        justifyContent: "flex-end"
    },
    modelMessage: {
        justifyContent: "flex-start"
    },
    bubble: {
        maxWidth: "80%",
        padding: 10,
        borderRadius: 12
    },
    userBubble: {
        backgroundColor: colors.primary,
        borderTopRightRadius: 0
    },
    modelBubble: {
        backgroundColor: "#f1f1f1",
        borderTopLeftRadius: 0
    },
    userText: {
        color: "#fff"
    },
    modelText: {
        color: "#000"
    },
    messageText: {
        fontSize: 15,
        lineHeight: 20
    },
    inputContainer: {
        bottom: 0,
        left: 0,
        width: "100%",
        flexDirection: "row",
        alignItems: "center",
        backgroundColor: "#fff",
        borderTopWidth: 1,
        borderTopColor: "#ddd",
        padding: 8,
    },
    input: {
        flex: 1,
        padding: 10,
        borderWidth: 1,
        borderColor: "#ddd",
        borderRadius: 20,
        fontSize: 15,
        backgroundColor: "#fafafa",
        maxHeight: 100
    },
    sendButton: {
        backgroundColor: "#0078ff",
        padding: 10,
        borderRadius: 20,
        marginLeft: 8
    }
});